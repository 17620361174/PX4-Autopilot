name: Build and deploy APX4 release

on:
  release:
    types: [created]

jobs:
  release:
   name: Build and deploy Nuttx targets for the release
   runs-on: ubuntu-latest
   container: px4io/px4-dev-nuttx-focal:2021-09-08
   outputs:
     release: ${{ steps.references.outputs.release }}
     tag: ${{ steps.references.outputs.tag_branch }}
     valid_tag: ${{ steps.references.outputs.valid_tag }}
   steps:
    - uses: actions/checkout@v1
    - name: Disable the keychain credential helper
      run: git config --global credential.helper ""
    - name: Enable the local store credential helper
      run: git config --global --add credential.helper store
    - name: Add credential
      run: echo "https://x-access-token:${{ secrets.ACCESS_TOKEN }}@github.com" >> ~/.git-credentials
    - name: Tell git to use https instead of ssh whenever it encounters it
      run: 'git config --global url."https://github.com/".insteadof git@github.com:'
    - name: Get submodules
      run: 'git submodule update --init --recursive'

    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")
    - name: ccache cache files
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: release-nuttx-${{steps.ccache_cache_timestamp.outputs.timestamp}}
        restore-keys: release-nuttx-
    - name: Setup ccache
      run: |
          mkdir -p ~/.ccache
          echo "base_dir = ${GITHUB_WORKSPACE}" > ~/.ccache/ccache.conf
          echo "compression = true" >> ~/.ccache/ccache.conf
          echo "compression_level = 6" >> ~/.ccache/ccache.conf
          echo "max_size = 400M" >> ~/.ccache/ccache.conf
          ccache -s
          ccache -z

    - name: Make Nuttx development targets
      run: |
        ## Create target directory
        mkdir development
        ## Build targets
        make px4_fmu-v5_default
        make px4_fmu-v5_rtps
        make px4_fmu-v5x_default
        make px4_fmu-v5x_rtps
        ## Move target resulting artifacts to the development folder
        mv build/* development/

    - name: Make Nuttx production targets
      run: |
        ## Create target directory
        mkdir production
        ## Build targets
        PX4_RESTRICTED_BUILD=1 make px4_fmu-v5_default
        PX4_RESTRICTED_BUILD=1 make px4_fmu-v5_rtps
        PX4_RESTRICTED_BUILD=1 make px4_fmu-v5x_default
        PX4_RESTRICTED_BUILD=1 make px4_fmu-v5x_rtps
        ## Move target resulting artifacts to the production folder
        mv build/* production/

    - name: Create .zip for development targets
      run: |
        zip development-nuttx-targets.zip \
          development/*/*.elf \
          development/*/*.map \
          development/*/*.px4 \
          development/*/*.bin

    - name: Create .zip for production targets
      run: |
        zip production-nuttx-targets.zip \
          production/*/*.elf \
          production/*/*.map \
          production/*/*.px4 \
          production/*/*.bin

    # Based on https://github.com/cli/cli/blob/trunk/docs/install_linux.md
    - name: Install Github client
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        apt update
        apt install -y gh

    - name: Upload development artifacts
      run: gh release upload --clobber ${{ github.event.release.tag_name }} development-nuttx-targets.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload production artifacts
      run: gh release upload --clobber ${{ github.event.release.tag_name }} production-nuttx-targets.zip
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Set initial references
      id: references
      run: |
        TAG_BRANCH=$(echo $GITHUB_REF | sed -e 's#refs/tags/##g')
        REF_BRANCH=$(git branch -a --contains tags/$TAG_BRANCH | grep release | sed "s/.*\(release\/.*\).*/\1/p" | head -n 1)
        VALID_RELEASE="v([0-9]+)\.([0-9]+)\.([0-9]+)-([0-9]+)\.([0-9]+)\.([0-9]+)?$"
        RELEASE=$(echo $REF_BRANCH | sed -r 's/release\///')
        echo "::set-output name=valid_tag::${VALID_RELEASE}"
        echo "::set-output name=ref_branch::${REF_BRANCH}"
        echo "::set-output name=tag_branch::${TAG_BRANCH}"
        echo "::set-output name=release::${RELEASE}"
        echo "::set-output name=timestamp::$(date)"

    # Note: The stages bellow for AOS will eventually disappear as soon as the
    # AuterionOS release container fetches the binaries directly from Artifactory
    - name: Clone AuterionOS
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.ACCESS_TOKEN }}
        repository: Auterion/AuterionOS
        path: distro/

    - name: Update binaries in AuterionOS
      id: update_aos_binaries
      run: |
        yes | cp -rf development/*/px4_fmu-v5*.px4 distro/src/fmu/binaries/dev
        yes | cp -rf production/*/px4_fmu-v5*.px4 distro/src/fmu/binaries/prod
        DISTRO_REF_BRANCH=$(echo ${{ steps.references.outputs.ref_branch }} | sed -r "s/\/+/-/g") # required while we don't define a branch naming convention for releases
        cd distro
        echo "::set-output name=aos_branch::`sh -c \"if git ls-remote --heads --exit-code --quiet https://github.com/Auterion/auterion_distro_resin.git \${DISTRO_REF_BRANCH}; then echo \${DISTRO_REF_BRANCH}; else echo master; fi | tail -1\"`"
        cd ..

    - name: Create PR to AuterionOS repo
      uses: peter-evans/create-pull-request@v3
      with:
        token: ${{ secrets.ACCESS_TOKEN }}
        path: distro/
        title: "Release ${{ steps.references.outputs.release }} FMU binaries update | ${{ steps.references.outputs.timestamp }}"
        body: "Updates FMU binaries for release ${{ steps.references.outputs.release }}, created in ${{ steps.references.outputs.timestamp }}."
        reviewers: DanielePettenuzzo,QuentinVecchio
        commit-message: "src: fmu: update binaries for release ${{ steps.references.outputs.release }}"
        author: auterionci <ci@auterion.com>
        committer: auterionci <ci@auterion.com>
        base: ${{ steps.update_aos_binaries.outputs.aos_branch }}
        branch: pr-update_fmu_binaries_release_${{ steps.references.outputs.release }}

  deploy-release-branches:
    name: Create v${{ needs.release.outputs.release }} release branch in customer repos
    runs-on: ubuntu-latest
    container: px4io/px4-dev-nuttx-focal:2021-09-08
    needs: release
    steps:
      - uses: actions/checkout@v1
      - name: Disable the keychain credential helper
        run: git config --global credential.helper ""
      - name: Enable the local store credential helper
        run: git config --global --add credential.helper store
      - name: Add credential
        run: echo "https://x-access-token:${{ secrets.ACCESS_TOKEN }}@github.com" >> ~/.git-credentials
      - name: Tell git to use https instead of ssh whenever it encounters it
        run: 'git config --global url."https://github.com/".insteadof git@github.com:'
      - name: Get submodules
        run: 'git submodule update --init --recursive'

      - name: Push release branch to customers repos
        shell: bash
        env:
          CUSTOM_LIST: ${{ secrets.CUSTOM_LIST }}
        run: |
          # Only push if it is a final release
          if [[ "${{ needs.release.outputs.tag }}" =~ ${{ needs.release.outputs.valid_tag }} ]]; then
            printf $CUSTOM_LIST > tmp_list
            perl -0pe 's/,/\n/g' tmp_list > list
            while read url; do
              remote=$(echo $url | awk -F'/' ' { print $NF } ')
              git remote add $remote $url
              git push -u $remote HEAD:refs/tags/${{ needs.release.outputs.tag }}
              git push -u $remote HEAD:refs/heads/auterion/v${{ needs.release.outputs.release }}
              git remote remove $remote
            done < list
          fi
